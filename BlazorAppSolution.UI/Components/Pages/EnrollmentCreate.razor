@page "/enrollment/create"
@using BlazorAppSolution.UI.Model
@using BlazorAppSolution.UI.Services
@inject EnrollmentService EnrollmentService
@inject NavigationManager Navigation

<h3>Create Enrollment</h3>

<EditForm Model="newEnrollment" OnValidSubmit="HandleCreateEnrollment" FormName="EnrollmentForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="instructorId">Instructor ID</label>
        <InputNumber id="instructorId" class="form-control" @bind-Value="newEnrollment.instructorId" required />
    </div>

    <div class="form-group">
        <label for="courseId">Course ID</label>
        <InputNumber id="courseId" class="form-control" @bind-Value="newEnrollment.courseId" required />
    </div>

    <button type="submit" class="btn btn-primary">Create Enrollment</button>
</EditForm>

@if (isLoading)
{
    <p>Creating Enrollment...</p>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@code {
    private EnrollmentAdd newEnrollment = new EnrollmentAdd();  // Using EnrollmentAdd model
    private bool isLoading = false;
    private string? errorMessage;

    private async Task HandleCreateEnrollment()
    {
        isLoading = true;
        errorMessage = null;

        // Log the content of the newEnrollment
        Console.WriteLine($"Instructor ID: {newEnrollment.instructorId}, Course ID: {newEnrollment.courseId}");

        bool isSuccess = await EnrollmentService.CreateAsync(newEnrollment);

        isLoading = false;

        if (isSuccess)
        {
            Navigation.NavigateTo("/enrollment");
        }
        else
        {
            errorMessage = "Error creating enrollment. Please try again.";
        }
    }

}
