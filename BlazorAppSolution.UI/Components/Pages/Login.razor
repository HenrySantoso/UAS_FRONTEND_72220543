@page "/"
@using System.Net.Http.Json
@using System.Text.Json
@using System.Text
@inject NavigationManager Navigation
@inject HttpClient HttpClient
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@rendermode InteractiveServer

<h3>Login</h3>

<form @onsubmit="HandleLogin">
    <div class="form-group">
        <label for="username">Username:</label>
        <input id="username" type="text" class="form-control" @bind="username" required />
    </div>
    <div class="form-group">
        <label for="password">Password:</label>
        <div class="input-group">
            <input id="password" type="@passwordInputType" class="form-control" @bind="password" required />
            <button type="button" class="btn btn-outline-secondary" @onclick="TogglePasswordVisibility">
                @(isPasswordVisible ? "Hide" : "Show")
            </button>
        </div>
    </div>
    <button type="submit" class="btn btn-primary">Login</button>
</form>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

@code {
    private string username = string.Empty;
    private string password = string.Empty;
    private string? errorMessage;

    private bool isPasswordVisible = false;
    private string passwordInputType = "password";

    private void TogglePasswordVisibility()
    {
        isPasswordVisible = !isPasswordVisible;
        passwordInputType = isPasswordVisible ? "text" : "password";
    }

    private async Task HandleLogin()
    {
        errorMessage = null;

        try
        {
            var loginData = new { userName = username, password = password };
            var json = JsonSerializer.Serialize(loginData);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            var response = await HttpClient.PostAsync("https://actbackendseervices.azurewebsites.net/api/login", content);
            var responseContent = await response.Content.ReadAsStringAsync();

            Console.WriteLine($"API Response: {responseContent}");  // Log the response content

            if (response.IsSuccessStatusCode)
            {
                var loginResponse = JsonSerializer.Deserialize<LoginResponse>(responseContent);

                if (loginResponse?.Token != null)
                {
                    await LocalStorage.SetItemAsync("auth_token", loginResponse.Token);
                    Console.WriteLine("Navigating to /home");
                    Navigation.NavigateTo("/home", forceLoad: true);
                }
                else
                {
                    errorMessage = "Invalid username or password.";
                    Console.WriteLine("Token is null or empty.");
                }
            }
            else
            {
                errorMessage = $"Error: {response.StatusCode}. Response: {responseContent}";
                Console.WriteLine($"Error: {response.StatusCode}. Details: {responseContent}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private class LoginResponse
    {
        public string? Token { get; set; }
    }
}
