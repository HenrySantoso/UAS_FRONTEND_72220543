@page "/"

@using System.Net.Http.Json
@using System.Text.Json
@using System.Text
@using Newtonsoft.Json
@using BlazorAppSolution.UI.Model
@inject NavigationManager Navigation
@inject HttpClient HttpClient
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@rendermode InteractiveServer

<h3 class="text-center mb-4">Login</h3>

<div class="login-container">
    <form @onsubmit="HandleLogin">
        <div class="form-group">
            <label for="username">Username:</label>
            <input id="username" type="text" class="form-control" @bind="username" required />
        </div>
        <div class="form-group">
            <label for="password">Password:</label>
            <div class="input-group">
                <input id="password" type="@passwordInputType" class="form-control" @bind="password" required />
                <button type="button" class="btn btn-outline-secondary" @onclick="TogglePasswordVisibility">
                    @(isPasswordVisible ? "Hide" : "Show")
                </button>
            </div>
        </div>
        <button type="submit" class="btn btn-primary btn-block">Login</button>
    </form>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">@errorMessage</div>
    }
</div>
<style>
    /* Center the login form */
    .login-container {
        max-width: 400px;
        margin: 50px auto;
        padding: 30px;
        background-color: #ffffff;
        border-radius: 8px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    /* Apply a modern font to the header */
    h3 {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        color: #2c3e50;
        font-weight: 600;
    }

    /* Style the input fields */
    .form-group label {
        font-weight: 500;
        color: #34495e;
    }

    .form-control {
        border-radius: 4px;
        box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
        padding: 10px;
        font-size: 16px;
        border: 1px solid #ccc;
        transition: border-color 0.3s;
    }

        /* Hover effect for inputs */
        .form-control:focus {
            border-color: #2980b9;
            outline: none;
        }

    /* Style for password visibility toggle button */
    .input-group button {
        background-color: transparent;
        border: 1px solid #ccc;
        border-radius: 4px;
        color: #2980b9;
        cursor: pointer;
        padding: 10px;
    }

    /* Style for login button */
    .btn-primary {
        width: 100%;
        padding: 10px;
        background-color: #3498db;
        border-color: #2980b9;
        font-size: 16px;
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        transition: background-color 0.3s, box-shadow 0.3s;
    }

        .btn-primary:hover {
            background-color: #2980b9;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }

    /* Add padding and margins for error messages */
    .alert {
        padding: 15px;
        margin-top: 10px;
        border-radius: 5px;
    }
</style>

@code {
    private string username = string.Empty;
    private string password = string.Empty;
    private string? errorMessage;

    private bool isPasswordVisible = false;
    private string passwordInputType = "password";

    private void TogglePasswordVisibility()
    {
        isPasswordVisible = !isPasswordVisible;
        passwordInputType = isPasswordVisible ? "text" : "password";
    }

    private async Task HandleLogin()
    {
        errorMessage = null;

        try
        {
            var loginData = new { userName = username, password = password };
            var json = JsonConvert.SerializeObject(loginData);
            var content = new StringContent(json, Encoding.UTF8, "application/json");

            var response = await HttpClient.PostAsync("https://actbackendseervices.azurewebsites.net/api/login", content);
            var responseContent = await response.Content.ReadAsStringAsync();

            Console.WriteLine($"API Response: {responseContent}");  // Log the response content

            if (response.IsSuccessStatusCode)
            {
                // Deserialize response to LoginResponse
                var loginResponse = JsonConvert.DeserializeObject<LoginResponse>(responseContent);

                if (!string.IsNullOrEmpty(loginResponse?.Token))
                {
                    // Save the token in local storage
                    await LocalStorage.SetItemAsync("auth_token", loginResponse.Token);
                    Console.WriteLine("Navigating to /home");
                    Navigation.NavigateTo("/home");
                }
                else
                {
                    errorMessage = "Invalid username or password.";
                    Console.WriteLine("Token is null or empty.");
                }
            }
            else
            {
                errorMessage = $"Error: {response.StatusCode}. Response: {responseContent}";
                Console.WriteLine($"Error: {response.StatusCode}. Details: {responseContent}");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
        }
    }

    private class LoginResponse
    {
        public string? Token { get; set; }
    }
}
