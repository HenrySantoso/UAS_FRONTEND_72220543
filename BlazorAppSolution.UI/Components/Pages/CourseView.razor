@page "/course"
@using BlazorAppSolution.UI.Model
@using BlazorAppSolution.UI.Services
@inject CourseService CourseService
@inject EnrollmentService EnrollmentService  
@inject IJSRuntime JS
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Course</PageTitle>

<div class="course-container">
    <h1>Course</h1>

    <NavLink class="btn btn-primary mb-3" href="/course/create">Add New Course</NavLink>

    <div class="filter-section mb-3">
        <input type="text" placeholder="Search by course name" @bind="searchText" class="form-control" @oninput="OnSearchInput" />
    </div>

    @if (filteredCourses == null)
    {
        <p><em>Loading...</em></p>
    }
    else if (filteredCourses.Count == 0)
    {
        <p>No courses found.</p>
    }
    else
    {
        <div class="row">
            @foreach (var course in filteredCourses)
            {
                <div class="col-md-4 mb-4">
                    <div class="card course-card">
                        <img src="@course.ImageName" alt="@course.Name" class="card-img-top" />
                        <div class="card-body text-center">
                            <h5 class="card-title">@course.Name</h5>
                            <p class="card-text">Id: @course.CourseId</p>
                            <p class="card-text">Duration: @course.Duration</p>
                            <p class="card-text">@course.Description</p>
                            <p class="card-text">Category: @course.Category.Name</p>
                            <p class="card-text">Total Enroller: @GetTotalEnrollments(course.CourseId ?? 0)</p> <!-- Update this line -->
                            <div class="button-group">
                                <button class="btn btn-outline-secondary me-2" @onclick="() => UpdateCourse(course.CourseId ?? 0)">Update</button>
                                <button class="btn btn-outline-danger" @onclick="() => DeleteCourse(course.CourseId ?? 0)">Delete</button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
</div>

<style>
    /* Your existing styles here */
</style>

@code {
    private List<Course>? filteredCourses;
    private string searchText = string.Empty;
    private List<Enrollment>? enrollments;

    protected override async Task OnInitializedAsync()
    {
        await LoadCoursesAndEnrollments();
    }

    private async Task LoadCoursesAndEnrollments()
    {
        try
        {
            filteredCourses = await CourseService.GetCoursesAsync();
            enrollments = await EnrollmentService.GetEnrollmentsAsync(); // Fetch all enrollments
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("alert", $"An error occurred while loading courses or enrollments: {ex.Message}");
        }
    }

    private int GetTotalEnrollments(int courseId)
    {
        if (enrollments == null) return 0;
        return enrollments.Count(e => e.courseId == courseId); // Count enrollments for this course
    }

    private async void OnSearchInput(ChangeEventArgs e)
    {
        searchText = e.Value?.ToString() ?? string.Empty;

        if (string.IsNullOrWhiteSpace(searchText))
        {
            // Load all courses if search text is cleared
            await LoadCoursesAndEnrollments();
        }
        else
        {
            try
            {
                // Fetch filtered courses and enrollments based on search
                filteredCourses = await CourseService.GetCourseByNameAsync(searchText);
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", $"An error occurred while searching: {ex.Message}");
            }
        }

        StateHasChanged(); // Trigger UI update
    }

    private void UpdateCourse(int courseId)
    {
        Navigation.NavigateTo($"/course/edit/{courseId}");
    }

    private async Task DeleteCourse(int courseId)
    {
        bool confirm = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this course?");
        if (confirm)
        {
            try
            {
                await CourseService.DeleteCourseAsync(courseId);
                await LoadCoursesAndEnrollments(); // Reload after deleting
            }
            catch (Exception ex)
            {
                await JS.InvokeVoidAsync("alert", $"An error occurred while deleting the course: {ex.Message}");
            }
        }
    }
}
